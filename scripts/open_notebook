#! /bin/env python3
from __future__ import annotations

import sys
from subprocess import run
from typing import NamedTuple


NOTEBOOK_WIN_CLASS = 'Notebook'
CODE_WIN_CLASS = "Code"


class Window(NamedTuple):
    id: str
    klass: str
    title: str


def parse_list_output_line(raw: str) -> Window:
    raw = raw.strip()
    id_, _, klass, _, *title = raw.split()

    return Window(id_, klass, ' '.join(title))


def find_window(wins: list[Window], win_klass: str) -> Window | None:
    for w in wins:
        if win_klass in w.klass:
            return w

    return None


def focus_window(w: Window) -> None:
    run(['wmctrl', '-iR', w.id])


def open_new_window(win_klass) -> None:
    commands = {
        NOTEBOOK_WIN_CLASS: [
            'nixGL',
            'alacritty',
            '--class',
            win_klass,
            '-e',
            '/home/denis/scripts/weekly_note',
        ],
        CODE_WIN_CLASS: [
            'nixGL',
            'alacritty',
            '--class',
            win_klass,
        ],
    }
    proc = run(
        commands[win_klass],
        capture_output=True,
    )


def list_windows() -> list[Window]:
    proc = run(['wmctrl', '-lx'], capture_output=True, check=True, text=True)
    wins = [parse_list_output_line(line) for line in proc.stdout.splitlines()]
    return wins


def main():
    win_klass = sys.argv[1]
    wins = list_windows()

    if w := find_window(wins, win_klass):
        focus_window(w)
    else:
        open_new_window(win_klass)


if __name__ == "__main__":
    main()
