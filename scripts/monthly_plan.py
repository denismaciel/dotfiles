# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "reportlab",
#     "click",
# ]
# ///
"""
Generate a single-page A4 landscape PDF with one square per day for the next N months,
grouped visually by week. Designed to be printed and manually marked.

Example:
    python three_month_plan.py --months 3 --outfile my-plan.pdf
"""

from __future__ import annotations

import calendar
from dataclasses import dataclass
from datetime import date
from datetime import timedelta

import click
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas as _canvas


@dataclass(frozen=True)
class DayCell:
    day: date
    in_range: bool  # whether this day is within [start, end], as we pad weeks to Mondays/Sundays


def month_last_day(y: int, m: int) -> int:
    return calendar.monthrange(y, m)[1]


def add_months(d: date, months: int) -> date:
    y = d.year + (d.month - 1 + months) // 12
    m = (d.month - 1 + months) % 12 + 1
    day = min(d.day, month_last_day(y, m))
    return date(y, m, day)


def end_of_month(d: date) -> date:
    return date(d.year, d.month, month_last_day(d.year, d.month))


def month_name(d: date) -> str:
    return calendar.month_abbr[d.month]


def generate_calendar_cells(start: date, end: date) -> tuple[list[DayCell], int]:
    week_start = start - timedelta(days=start.weekday())  # Monday on/preceding start
    week_end = end + timedelta(days=(6 - end.weekday()))  # Sunday on/following end

    cells: list[DayCell] = []
    cur = week_start
    while cur <= week_end:
        cells.append(DayCell(day=cur, in_range=(start <= cur <= end)))
        cur += timedelta(days=1)

    num_weeks = (len(cells) + 6) // 7
    return cells, num_weeks


@click.command()
@click.option(
    '--months',
    type=click.IntRange(1, 12),
    default=3,
    show_default=True,
    help="How many months to include starting from START-DATE's month/day.",
)
@click.option(
    '--end-date',
    type=click.DateTime(formats=['%Y-%m-%d']),
    default=None,
    help='End date (YYYY-MM-DD). If provided, overrides --months.',
)
@click.option(
    '--start-date',
    type=click.DateTime(formats=['%Y-%m-%d']),
    default=None,
    help='Start date (YYYY-MM-DD). Defaults to today.',
)
@click.option(
    '--outfile',
    type=click.Path(dir_okay=False, writable=True),
    default='three-month-plan.pdf',
    show_default=True,
    help='Output PDF filename.',
)
def main(months: int, end_date, start_date, outfile: str):
    start = start_date.date() if start_date else date.today()

    # Calculate end date for title
    if end_date:
        end = end_date.date()
    else:
        # Default to exactly 90 days from start
        end = start + timedelta(days=89)

    cells, num_weeks = generate_calendar_cells(start, end)

    # Page setup
    PAGE_W, PAGE_H = A4
    c = _canvas.Canvas(outfile, pagesize=(PAGE_W, PAGE_H))

    # Margins & layout
    M_L = M_R = 28
    M_T = 36
    M_B = 36
    GRID_W = PAGE_W - M_L - M_R
    GRID_H = PAGE_H - M_T - M_B

    COLS = 7
    ROWS = num_weeks

    # Make squares slightly smaller than max size
    cell_w = GRID_W / COLS
    cell_h = GRID_H / ROWS
    side = min(cell_w, cell_h) * 0.9  # shrink by 10%

    total_w = side * COLS
    total_h = side * ROWS
    origin_x = M_L + (GRID_W - total_w) / 2
    origin_y = M_B + (GRID_H - total_h) / 2

    # Fonts
    c.setTitle('Three-Month Weekly Squares Plan')
    c.setAuthor('Generated by single-file Python script')
    font_day = ('Helvetica', 8)
    font_month = ('Helvetica-Bold', 10)
    font_title = ('Helvetica-Bold', 16)

    # Title
    title = f'Plan — {start:%b %d, %Y} → {end:%b %d, %Y}'
    c.setFont(*font_title)
    c.drawString(M_L, PAGE_H - M_T + 10, title)

    # Weekday headers
    weekday_names = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    c.setFont('Helvetica-Bold', 9)
    for col, name in enumerate(weekday_names):
        x = origin_x + col * side + side * 0.5
        y = origin_y + total_h + 6
        c.drawCentredString(x, y, name)

    # Draw grid & dates
    c.setLineWidth(0.5)
    month_color_bg = colors.Color(0.95, 0.95, 0.98)
    out_of_range_bg = colors.Color(0.96, 0.96, 0.96)

    months_labeled: set[tuple[int, int]] = set()

    for idx, cell in enumerate(cells):
        row = idx // 7
        col = idx % 7
        x = origin_x + col * side
        y = origin_y + (ROWS - 1 - row) * side

        if not cell.in_range:
            c.setFillColor(out_of_range_bg)
            c.rect(x, y, side, side, fill=1, stroke=0)
            c.setFillColor(colors.black)

        if cell.in_range and cell.day.day == 1:
            c.setFillColor(month_color_bg)
            c.rect(x, y, side, side, fill=1, stroke=0)
            c.setFillColor(colors.black)

        c.setLineWidth(0.3)
        c.setStrokeColor(colors.black)
        c.rect(x, y, side, side, fill=0, stroke=1)

        key = (cell.day.year, cell.day.month)
        if cell.in_range and cell.day.day == 1 and key not in months_labeled:
            c.setFont(*font_month)
            month_text = month_name(cell.day)
            c.drawString(x + 2.5, y + side - 10, f'{month_text} {cell.day.day}')
            months_labeled.add(key)
        else:
            c.setFont(*font_day)
            c.drawString(x + 2.5, y + side - 10, str(cell.day.day))

    # Thicker horizontal week separators
    c.setLineWidth(1.0)
    for r in range(ROWS + 1):
        y = origin_y + r * side
        c.line(origin_x, y, origin_x + total_w, y)

    # Outer border
    c.setLineWidth(1.5)
    c.rect(origin_x, origin_y, total_w, total_h, fill=0, stroke=1)

    c.showPage()
    c.save()
    click.echo(f'Saved: {outfile}')


if __name__ == '__main__':
    main()
