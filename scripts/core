#!/usr/bin/env -S uv run --script

# /// script
# requires-python = ">=3.12"
# ///

import argparse
import json
import os
import subprocess
from pathlib import Path

# Session configuration
SESSION_NAME = 'claudio'
DESIRED_WINDOWS = {
    'recap': '~/github.com/recap-technologies/core',
    'sam': '~/github.com/denismaciel/sam',
    'dotfiles': '~/dotfiles',
}


def get_current_windows(session_name):
    """Get current windows in tmux session."""
    try:
        result = subprocess.run(
            [
                'tmux',
                'list-windows',
                '-t',
                session_name,
                '-F',
                '#{window_name}:#{window_start_directory}',
            ],
            capture_output=True,
            text=True,
            check=True,
        )

        windows = {}
        for line in result.stdout.strip().split('\n'):
            if ':' in line:
                name, directory = line.split(':', 1)
                windows[name] = directory

        return windows

    except subprocess.CalledProcessError:
        # Session doesn't exist
        return {}


def get_worktrees(bare_repo_path):
    """Get list of worktree paths from bare repository."""
    if not Path(bare_repo_path).exists():
        return {}

    old_cwd = os.getcwd()
    os.chdir(bare_repo_path)

    try:
        result = subprocess.run(
            ['git', 'worktree', 'list', '--porcelain'],
            capture_output=True,
            text=True,
            check=True,
        )

        worktrees = {}
        for line in result.stdout.split('\n'):
            if line.startswith('worktree ') and '(bare)' not in line:
                worktree_path = line.split(' ', 1)[1]
                worktree_name = os.path.basename(worktree_path)
                window_name = f'recap-{worktree_name}'
                worktrees[window_name] = worktree_path

        return worktrees

    except subprocess.CalledProcessError:
        print(f'Warning: Could not list worktrees in {bare_repo_path}')
        return {}
    finally:
        os.chdir(old_cwd)


def create_update_plan(current_windows, desired_windows):
    """Create plan to update tmux session windows."""
    plan = {'to_add': {}, 'to_remove': []}

    # Find windows to add
    for name, directory in desired_windows.items():
        if name not in current_windows:
            plan['to_add'][name] = directory

    # Find windows to remove
    for name in current_windows:
        if name not in desired_windows:
            plan['to_remove'].append(name)

    return plan


def apply_update_plan(session_name, plan):
    """Apply the update plan to tmux session."""
    # Create session if it doesn't exist
    try:
        subprocess.run(
            ['tmux', 'has-session', '-t', session_name], check=True, capture_output=True
        )
    except subprocess.CalledProcessError:
        subprocess.run(['tmux', 'new-session', '-d', '-s', session_name])

    # Remove windows
    for window_name in plan['to_remove']:
        try:
            subprocess.run(
                ['tmux', 'kill-window', '-t', f'{session_name}:{window_name}'],
                check=True,
                capture_output=True,
            )
            print(f'Removed window: {window_name}')
        except subprocess.CalledProcessError:
            print(f'Warning: Could not remove window {window_name}')

    # Add windows
    for window_name, directory in plan['to_add'].items():
        expanded_dir = os.path.expanduser(directory)
        try:
            subprocess.run(
                [
                    'tmux',
                    'new-window',
                    '-t',
                    session_name,
                    '-n',
                    window_name,
                    '-c',
                    expanded_dir,
                ],
                check=True,
                capture_output=True,
            )
            print(f'Added window: {window_name} -> {directory}')
        except subprocess.CalledProcessError:
            print(f'Warning: Could not create window {window_name}')


def main():
    parser = argparse.ArgumentParser(
        description='Manage tmux session with worktree windows'
    )
    parser.add_argument(
        '-b',
        '--bare-repo',
        default='/home/denis/github.com/recap-technologies/core-bare',
        help='Path to bare repository',
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Print update plan without applying changes',
    )

    args = parser.parse_args()

    # Get current state
    current_windows = get_current_windows(SESSION_NAME)

    # Build desired state
    desired_windows = DESIRED_WINDOWS.copy()
    worktrees = get_worktrees(args.bare_repo)
    desired_windows.update(worktrees)

    # Create update plan
    plan = create_update_plan(current_windows, desired_windows)

    # If dry-run, just print the plan and exit
    if args.dry_run:
        print(f'Current windows: {json.dumps(current_windows, indent=2)}')
        print(f'Desired windows: {json.dumps(desired_windows, indent=2)}')
        print(f'Update plan: {json.dumps(plan, indent=2)}')
        return 0

    # Apply the update plan
    apply_update_plan(SESSION_NAME, plan)

    # Attach to session
    subprocess.run(['tmux', 'attach-session', '-t', SESSION_NAME])
    return 0


if __name__ == '__main__':
    exit(main())
