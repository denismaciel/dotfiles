#!/usr/bin/env -S uv --quiet run --script
# /// script
# dependencies = ["libtmux"]
# ///

import argparse
import json
import os
import subprocess
from pathlib import Path

import libtmux

# Session configuration
SESSION_NAME = 'core'
DESIRED_WINDOWS = {
    'recap': '~/github.com/recap-technologies/core',
    'recap-run': '~/github.com/recap-technologies/core',
    'sam': '~/github.com/denismaciel/sam',
    'sam-run': '~/github.com/denismaciel/sam',
    'beluga': '~/github.com/emilianoabad/belugaweb/',
    'heraclito': '~/github.com/heraclito-ai/heraclito/',
    'finance': '~/github.com/denismaciel/finance',
    'denis': '~/github.com/denismaciel/denis',
    'dotfiles': '~/dotfiles',
}


def get_current_windows(session_name):
    """Get current windows in tmux session."""
    server = libtmux.Server()
    try:
        session = server.sessions.get(session_name=session_name)
        windows = {}
        for window in session.windows:
            # Get the active pane's current directory
            active_pane = window.active_pane
            windows[window.name] = active_pane.pane_current_path if active_pane else ''
        return windows
    except libtmux.exc.ObjectDoesNotExist:
        # Session doesn't exist
        return {}


def get_worktrees(bare_repo_path):
    """Get list of worktree paths from bare repository."""
    if not Path(bare_repo_path).exists():
        return {}

    old_cwd = os.getcwd()
    os.chdir(bare_repo_path)

    try:
        result = subprocess.run(
            ['git', 'worktree', 'list', '--porcelain'],
            capture_output=True,
            text=True,
            check=True,
        )

        worktrees = {}
        for line in result.stdout.split('\n'):
            if line.startswith('worktree ') and '(bare)' not in line:
                worktree_path = line.split(' ', 1)[1]
                worktree_name = os.path.basename(worktree_path)
                window_name = f'recap-{worktree_name}'
                worktrees[window_name] = worktree_path

        return worktrees
    except subprocess.CalledProcessError as e:
        print(f'Warning: Could not list worktrees in {bare_repo_path}: {e!r}')
        return {}
    finally:
        os.chdir(old_cwd)


def create_update_plan(current_windows, desired_windows):
    """Create plan to update tmux session windows."""
    plan = {'to_add': {}, 'to_remove': []}

    # Find windows to add
    for name, directory in desired_windows.items():
        if name not in current_windows:
            plan['to_add'][name] = directory

    # Find windows to remove
    for name in current_windows:
        if name not in desired_windows:
            plan['to_remove'].append(name)

    return plan


def apply_update_plan(session_name, plan):
    """Apply the update plan to tmux session."""
    server = libtmux.Server()

    # Create session if it doesn't exist
    session_created = False
    try:
        session = server.sessions.get(session_name=session_name)
    except libtmux.exc.ObjectDoesNotExist:
        session = server.new_session(session_name=session_name, kill_session=True)
        session_created = True

    # Remove windows
    for window_name in plan['to_remove']:
        try:
            window = session.windows.get(window_name=window_name)
            window.kill()
            print(f'Removed window: {window_name}')
        except libtmux.exc.ObjectDoesNotExist:
            print(f'Warning: Could not find window {window_name}')

    # Add windows
    for window_name, directory in plan['to_add'].items():
        expanded_dir = os.path.expanduser(directory)
        try:
            # Remove uv virtualenv from PATH
            current_path = os.environ.get('PATH', '')
            path_parts = current_path.split(':')
            # Filter out paths that contain .venv or virtualenv directories from uv
            filtered_path = [
                p
                for p in path_parts
                if not ('environments-v2' in p and '.cache/uv' in p)
            ]
            clean_path = ':'.join(filtered_path)

            # Create window with modified PATH that removes uv virtualenv
            window = session.new_window(
                window_name=window_name, start_directory=expanded_dir
            )

            # Special handling for recap-run window - create 3 horizontal panes
            if window_name == 'recap-run':
                pane = window.active_pane
                
                # Split horizontally to create second pane
                pane2 = window.split_window(vertical=False, start_directory=os.path.join(expanded_dir, 'frontend'))

                # Split the second pane horizontally to create third pane
                pane3 = pane2.split_window(vertical=False, start_directory=os.path.join(expanded_dir, 'pycap'))
                
                # Set up each pane with clean environment
                for p, subdir in [(pane, 'backend'), (pane2, 'frontend'), (pane3, 'pycap')]:
                    p.send_keys(f'cd {os.path.join(expanded_dir, subdir)}', enter=True)
                    p.send_keys(f'export PATH="{clean_path}"', enter=True)
                    p.send_keys('unset VIRTUAL_ENV', enter=True)
                    p.send_keys('clear', enter=True)
            # Special handling for sam-run window - create 2 horizontal panes
            elif window_name == 'sam-run':
                pane = window.active_pane
                
                # Split horizontally to create second pane
                pane2 = window.split_window(vertical=False, start_directory=os.path.join(expanded_dir, 'server'))
                
                # Set up each pane with clean environment
                for p, subdir in [(pane, 'web'), (pane2, 'server')]:
                    p.send_keys(f'cd {os.path.join(expanded_dir, subdir)}', enter=True)
                    p.send_keys(f'export PATH="{clean_path}"', enter=True)
                    p.send_keys('unset VIRTUAL_ENV', enter=True)
                    p.send_keys('clear', enter=True)
            else:
                # Set the clean PATH in the new window's active pane
                pane = window.active_pane
                pane.send_keys(f'export PATH="{clean_path}"', enter=True)
                pane.send_keys('unset VIRTUAL_ENV', enter=True)
                pane.send_keys('clear', enter=True)

            print(f'Added window: {window_name} -> {directory}')
        except Exception as e:
            print(f'Warning: Could not create window {window_name}: {e!r}')

    # Remove the initial default window only if we just created this session
    if session_created and len(session.windows) > 1:
        try:
            initial_window = session.windows.get(window_index='0')
            initial_window.kill()
            print('Removed initial default window')
        except libtmux.exc.ObjectDoesNotExist:
            pass  # Window 0 doesn't exist


def main():
    parser = argparse.ArgumentParser(
        description='Manage tmux session with worktree windows'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Print update plan without applying changes',
    )

    BARE_REPOS = [
        '/home/denis/github.com/recap-technologies/core-worktree/',
    ]

    args = parser.parse_args()

    # Get current state
    current_windows = get_current_windows(SESSION_NAME)

    # Build desired state
    desired_windows = DESIRED_WINDOWS.copy()
    for bare_repo in BARE_REPOS:
        worktrees = get_worktrees(bare_repo)
        desired_windows.update(worktrees)

    # Create update plan
    plan = create_update_plan(current_windows, desired_windows)

    # If dry-run, just print the plan and exit
    if args.dry_run:
        print(f'Current windows: {json.dumps(current_windows, indent=2)}')
        print(f'Desired windows: {json.dumps(desired_windows, indent=2)}')
        print(f'Update plan: {json.dumps(plan, indent=2)}')
        return 0

    # Apply the update plan
    apply_update_plan(SESSION_NAME, plan)

    # Attach to session
    server = libtmux.Server()
    session = server.sessions.get(session_name=SESSION_NAME)
    try:
        session.attach()
    except libtmux.exc.LibTmuxException:
        # Already inside tmux, switch to session instead
        session.switch_client()
    return 0


if __name__ == '__main__':
    exit(main())
