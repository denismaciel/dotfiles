#!/usr/bin/env -S uv --quiet run --script
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "reportlab",
#     "click",
# ]
# ///

"""
Generate a single-page A4 landscape PDF weekly tracker with activities as rows
and days of the week as columns. Designed to be printed and manually marked.

Example:
    python weekly_tracker.py --outfile my-weekly-tracker.pdf
"""

from __future__ import annotations

from dataclasses import dataclass
from datetime import date
from datetime import timedelta

import click
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.pagesizes import landscape
from reportlab.pdfgen import canvas as _canvas

activity_list = [
    'wake up',
    'suplements',
    'weight',
    'kids',
    're:cap',
    'casatoo.pt',
    'coffee',
    'blood pressure',
    'marinheiro',
    'roda',
]


@dataclass(frozen=True)
class ActivityCell:
    activity: str
    day: str
    day_date: date


def get_current_week_dates() -> list[date]:
    """Get dates for the current week starting from Monday."""
    today = date.today()
    # Find Monday of current week
    monday = today - timedelta(days=today.weekday())
    week_dates = []
    for i in range(7):
        week_dates.append(monday + timedelta(days=i))
    return week_dates


@click.command()
@click.option(
    '--outfile',
    type=click.Path(dir_okay=False, writable=True),
    default='weekly-tracker.pdf',
    show_default=True,
    help='Output PDF filename.',
)
def main(outfile: str):
    # Parse activities

    # Get current week dates
    week_dates = get_current_week_dates()
    weekday_names = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']

    # Page setup - Landscape A4
    PAGE_W, PAGE_H = landscape(A4)
    c = _canvas.Canvas(outfile, pagesize=(PAGE_W, PAGE_H))

    # Margins & layout
    M_L = M_R = 28
    M_T = 36
    M_B = 36
    GRID_W = PAGE_W - M_L - M_R
    GRID_H = PAGE_H - M_T - M_B

    COLS = 7  # Days of week
    ROWS = len(activity_list)  # Number of activities

    # Calculate cell dimensions
    cell_w = GRID_W / COLS
    cell_h = GRID_H / ROWS

    # Use separate width and height to create proper rectangles
    rect_w = cell_w * 0.95  # 5% margin
    rect_h = cell_h * 0.95  # 5% margin

    total_w = rect_w * COLS
    total_h = rect_h * ROWS
    origin_x = M_L + (GRID_W - total_w) / 2
    origin_y = M_B + (GRID_H - total_h) / 2

    # Fonts
    c.setTitle('Weekly Activity Tracker')
    c.setAuthor('Generated by weekly_tracker.py')
    font_activity = ('Helvetica-Bold', 6)
    font_day = ('Helvetica-Bold', 9)
    font_date = ('Helvetica', 8)
    font_title = ('Helvetica-Bold', 16)

    # Title
    week_start = week_dates[0]
    week_end = week_dates[-1]
    title = f'Weekly Tracker — {week_start:%b %d} → {week_end:%b %d, %Y}'
    c.setFont(*font_title)
    c.drawString(M_L, PAGE_H - M_T + 10, title)

    # Day headers with dates
    c.setFont(*font_day)
    for col, (name, day_date) in enumerate(zip(weekday_names, week_dates)):
        x = origin_x + col * rect_w + rect_w * 0.5
        y = origin_y + total_h + 12
        c.drawCentredString(x, y, name)
        # Date below day name
        c.setFont(*font_date)
        c.drawCentredString(x, y - 10, f'{day_date.day}')
        c.setFont(*font_day)

    # Activity labels on left
    c.setFont(*font_activity)
    for row, activity in enumerate(activity_list):
        y = origin_y + (ROWS - 1 - row) * rect_h + rect_h * 0.5
        x = origin_x - 15
        # Rotate text for vertical labels
        c.saveState()
        c.translate(x, y)
        c.rotate(90)
        c.drawCentredString(0, 0, activity)
        c.restoreState()

    # Draw grid
    c.setLineWidth(0.5)
    c.setStrokeColor(colors.black)

    # Draw all cells
    for row in range(ROWS):
        for col in range(COLS):
            x = origin_x + col * rect_w
            y = origin_y + (ROWS - 1 - row) * rect_h

            # Alternate row colors for better readability
            if row % 2 == 0:
                c.setFillColor(colors.Color(0.98, 0.98, 0.98))
            else:
                c.setFillColor(colors.white)
            c.rect(x, y, rect_w, rect_h, fill=1, stroke=0)

            # Draw border
            c.setFillColor(colors.black)
            c.setLineWidth(0.3)
            c.rect(x, y, rect_w, rect_h, fill=0, stroke=1)

    # Thicker horizontal activity separators
    c.setLineWidth(1.0)
    for r in range(ROWS + 1):
        y = origin_y + r * rect_h
        c.line(origin_x, y, origin_x + total_w, y)

    # Thicker vertical day separators
    for col in range(COLS + 1):
        x = origin_x + col * rect_w
        c.line(x, origin_y, x, origin_y + total_h)

    # Outer border
    c.setLineWidth(1.5)
    c.rect(origin_x, origin_y, total_w, total_h, fill=0, stroke=1)

    c.showPage()
    c.save()
    click.echo(f'Saved: {outfile}')


if __name__ == '__main__':
    main()
