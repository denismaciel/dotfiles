#! /bin/env python3
import argparse
import re
import sys
from subprocess import run

TODO_FILE = "/home/denis/Sync/Notes/Current/todo.md"
DONE_FILE = "/home/denis/Sync/Notes/Current/done.md"


class EmptyTodoError(Exception):
    ...


class CompletedTodoException(Exception):
    ...


def write_to_file(todos: list[str]):
    with open(TODO_FILE, "w") as f:
        f.write("\n".join(todos))


def select_todo(prompt: str) -> str:
    cmd = f'echo $(cat {TODO_FILE} | grep -v "DONE" | rofi -dmenu -p "{prompt} > ")'
    proc = run(cmd, shell=True, capture_output=True, text=True)
    proc.check_returncode()

    todo = proc.stdout.strip()

    if todo == "":
        raise EmptyTodoError

    return todo


def append_todo(todo):
    with open(TODO_FILE, "r") as f:
        todos = [line.strip() for line in f]

    todo = todo.strip()

    # If todo already exists, move it to the first position
    if todo in todos:
        todos.remove(todo)
        todos.insert(0, todo)
    else:
        todos = [f"TODO {todo}"] + todos

    write_to_file(todos)


def prepend_done(todo):
    import datetime

    with open(DONE_FILE, 'r+') as f:
        content = f.read()
        f.seek(0)
        f.write(datetime.datetime.now().isoformat() + ' ' + todo + '\n' + content)


def add_todo():
    with open(TODO_FILE, "r") as f:
        todos = [line.strip() for line in f]

    input_todo = select_todo("TODO")

    # If input_todo already exists, we want to toggle it as complete
    if input_todo in todos:
        i = todos.index(input_todo)
        input_todo = todos.pop(i)
        write_to_file(todos)
        input_todo = input_todo.replace("TODO", "DONE")
        prepend_done(input_todo)
        raise CompletedTodoException(input_todo)

    # Refactor to use append todo
    todos = [f"TODO {input_todo}"] + todos
    write_to_file(todos)


def handle_add_todo():
    try:
        add_todo()
    except EmptyTodoError:
        ...
    except CompletedTodoException as e:
        run(["notify-send", f"Completed {str(e)}"])
    except Exception as e:
        run(["notify-send", f"Failed: {str(e)}"])
    else:
        run(["notify-send", "TODO added successfully"])


def select_duration():
    durations = [25, 20, 15, 10, 5, 1]
    durations_str = r"\n".join(str(d) for d in durations)
    cmd = f"echo '{durations_str}' | rofi -dmenu -p 'Pomdoro'"
    proc = run(cmd, shell=True, check=True, capture_output=True, text=True)
    return proc.stdout.strip()


def move_to_top(todo, todos):
    """
    Moves todo the top of the todo list
    """
    return todos


def start_pomodoro():
    todo = select_todo("üçÖ")
    duration = select_duration()

    if duration.strip() == "":
        return

    append_todo(todo)
    run(
        ["/home/denis/go/bin//pomodoro", "start", "--duration", duration, todo],
        check=True,
        capture_output=True,
    )


def get_pomodoro_status():
    proc = run(
        ["/home/denis/go/bin//pomodoro", "status"],
        capture_output=True,
        check=True,
        text=True,
    )

    result = proc.stdout.strip()

    if result == "" or result.startswith('!'):
        print('pomodoro is not running')

    r'\düçÖ'


def handle_start_pomodoro():
    try:
        start_pomodoro()
    except EmptyTodoError:
        ...
    except Exception as e:
        run(["notify-send", f"Failed: {str(e)}"])


def main():
    argv = sys.argv[1:]
    parser = argparse.ArgumentParser(prog="todos")
    subparsers = parser.add_subparsers(dest="command")
    sp_add_todo = subparsers.add_parser("add-todo")
    sp_start_pomodoro = subparsers.add_parser("start-pomodoro")
    sp_get_pomodoro_status = subparsers.add_parser("get-pomodoro-status")

    args = parser.parse_args(argv)

    if args.command == "add-todo":
        handle_add_todo()
    elif args.command == "start-pomodoro":
        start_pomodoro()
    elif args.command == "get-pomodoro-status":
        get_pomodoro_status()
    else:
        run(["notify-send", f"Unknown command"])
        raise NotImplementedError("unknown command")


if __name__ == "__main__":
    main()
